from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.popup import Popup
from kivy.uix.scrollview import ScrollView
from kivy.clock import Clock
from datetime import datetime
import os

class TimerApp(App):
    def build(self):
        self.title = "–¢–∞–π–º–µ—Ä –¥–ª—è Android"
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.time_left = 0
        self.timer_running = False
        self.start_time = None
        self.log_file = "activity_log.txt"
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        main_layout = BoxLayout(orientation='vertical', padding=20, spacing=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = Label(
            text='–¢–ê–ô–ú–ï–† –ê–ö–¢–ò–í–ù–û–°–¢–ò', 
            font_size='24sp', 
            size_hint_y=None, 
            height='60dp',
            bold=True
        )
        main_layout.add_widget(title)
        
        # –°–µ–∫—Ü–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        time_section = BoxLayout(orientation='horizontal', size_hint_y=None, height='50dp')
        time_section.add_widget(Label(text='–í—Ä–µ–º—è (–º–∏–Ω):', font_size='16sp', size_hint_x=0.4))
        self.time_input = TextInput(
            text='25', 
            multiline=False, 
            font_size='16sp',
            size_hint_x=0.6,
            input_filter='int'
        )
        time_section.add_widget(self.time_input)
        main_layout.add_widget(time_section)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ - –±–æ–ª—å—à–æ–π –¥–∏—Å–ø–ª–µ–π
        self.time_display = Label(
            text='00:00', 
            font_size='64sp', 
            size_hint_y=None, 
            height='120dp',
            bold=True,
            color=[0.2, 0.6, 1, 1]  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
        )
        main_layout.add_widget(self.time_display)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º
        timer_buttons = GridLayout(cols=3, size_hint_y=None, height='60dp', spacing=10)
        
        self.start_button = Button(text='‚ñ∂ –°–¢–ê–†–¢', font_size='14sp')
        self.start_button.bind(on_press=self.start_timer)
        timer_buttons.add_widget(self.start_button)
        
        self.stop_button = Button(text='‚è∏ –°–¢–û–ü', font_size='14sp', disabled=True)
        self.stop_button.bind(on_press=self.stop_timer)
        timer_buttons.add_widget(self.stop_button)
        
        reset_button = Button(text='üîÑ –°–ë–†–û–°', font_size='14sp')
        reset_button.bind(on_press=self.reset_timer)
        timer_buttons.add_widget(reset_button)
        
        main_layout.add_widget(timer_buttons)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        main_layout.add_widget(Label(text='', size_hint_y=None, height='20dp'))
        
        # –°–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_label = Label(
            text='–ß–µ–º –∑–∞–Ω–∏–º–∞–ª–∏—Å—å:', 
            font_size='16sp', 
            size_hint_y=None, 
            height='30dp',
            text_size=(None, None),
            halign='left'
        )
        main_layout.add_widget(activity_label)
        
        self.activity_input = TextInput(
            multiline=True, 
            font_size='14sp',
            size_hint_y=None,
            height='80dp',
            hint_text='–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...'
        )
        main_layout.add_widget(self.activity_input)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.save_button = Button(
            text='üíæ –°–û–•–†–ê–ù–ò–¢–¨ –ê–ö–¢–ò–í–ù–û–°–¢–¨', 
            font_size='16sp',
            size_hint_y=None, 
            height='50dp', 
            disabled=True
        )
        self.save_button.bind(on_press=self.save_activity)
        main_layout.add_widget(self.save_button)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        main_layout.add_widget(Label(text='', size_hint_y=None, height='15dp'))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        log_buttons = GridLayout(cols=2, size_hint_y=None, height='50dp', spacing=10)
        
        view_log_button = Button(text='üìã –ü–û–°–ú–û–¢–†–ï–¢–¨ –õ–û–ì', font_size='14sp')
        view_log_button.bind(on_press=self.view_log)
        log_buttons.add_widget(view_log_button)
        
        clear_log_button = Button(text='üóëÔ∏è –û–ß–ò–°–¢–ò–¢–¨ –õ–û–ì', font_size='14sp')
        clear_log_button.bind(on_press=self.clear_log)
        log_buttons.add_widget(clear_log_button)
        
        main_layout.add_widget(log_buttons)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 
            font_size='14sp',
            size_hint_y=None, 
            height='40dp',
            color=[0, 0.7, 0, 1]  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
        )
        main_layout.add_widget(self.status_label)
        
        return main_layout
    
    def start_timer(self, instance):
        try:
            minutes = int(self.time_input.text)
            if minutes <= 0:
                self.status_label.text = "–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
                self.status_label.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
                return
                
            self.time_left = minutes * 60
            self.timer_running = True
            self.start_time = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.start_button.disabled = True
            self.stop_button.disabled = False
            self.time_input.readonly = True
            self.status_label.text = "‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω"
            self.status_label.color = [1, 0.5, 0, 1]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            Clock.schedule_interval(self.update_timer, 1)
            
        except ValueError:
            self.status_label.text = "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
            self.status_label.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
    
    def update_timer(self, dt):
        if self.timer_running and self.time_left > 0:
            self.time_left -= 1
            minutes = self.time_left // 60
            seconds = self.time_left % 60
            self.time_display.text = f"{minutes:02d}:{seconds:02d}"
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
            if self.time_left <= 60:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞
                self.time_display.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
            elif self.time_left <= 300:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                self.time_display.color = [1, 0.5, 0, 1]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            else:
                self.time_display.color = [0.2, 0.6, 1, 1]  # –°–∏–Ω–∏–π
            
            if self.time_left <= 0:
                self.timer_finished()
                
        return self.timer_running
    
    def timer_finished(self):
        self.timer_running = False
        self.time_display.text = "00:00"
        self.time_display.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
        self.status_label.text = "‚è∞ –í–†–ï–ú–Ø –í–´–®–õ–û! –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        self.status_label.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
        self.save_button.disabled = False
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.time_input.readonly = False
        self.activity_input.focus = True
        
        Clock.unschedule(self.update_timer)
    
    def stop_timer(self, instance):
        self.timer_running = False
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.time_input.readonly = False
        self.status_label.text = "‚è∏ –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        self.status_label.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
        Clock.unschedule(self.update_timer)
    
    def reset_timer(self, instance):
        self.timer_running = False
        self.time_left = 0
        self.time_display.text = "00:00"
        self.time_display.color = [0.2, 0.6, 1, 1]  # –°–∏–Ω–∏–π
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.time_input.readonly = False
        self.save_button.disabled = True
        self.activity_input.text = ""
        self.status_label.text = "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        self.status_label.color = [0, 0.7, 0, 1]  # –ó–µ–ª–µ–Ω—ã–π
        Clock.unschedule(self.update_timer)
    
    def save_activity(self, instance):
        activity = self.activity_input.text.strip()
        if not activity:
            self.status_label.text = "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            self.status_label.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
            return
        
        try:
            duration_minutes = int(self.time_input.text)
            end_time = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(self.log_file):
                with open(self.log_file, "w", encoding="utf-8") as f:
                    f.write("=== –ñ–£–†–ù–ê–õ –ê–ö–¢–ò–í–ù–û–°–¢–ò ===\n\n")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(
                    f"üìÖ {self.start_time:%Y-%m-%d %H:%M:%S} ‚Üí "
                    f"{end_time:%Y-%m-%d %H:%M:%S}\n"
                    f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω\n"
                    f"üìù –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}\n"
                    f"{'-' * 40}\n\n"
                )
            
            self.status_label.text = "üíæ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
            self.status_label.color = [0, 0.7, 0, 1]  # –ó–µ–ª–µ–Ω—ã–π
            self.save_button.disabled = True
            self.activity_input.text = ""
            
        except Exception as e:
            self.status_label.text = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}"
            self.status_label.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
    
    def view_log(self, instance):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥ –≤ popup –æ–∫–Ω–µ"""
        try:
            if not os.path.exists(self.log_file):
                content_text = "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π."
            else:
                with open(self.log_file, "r", encoding="utf-8") as f:
                    content_text = f.read()
                    if not content_text.strip():
                        content_text = "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç.\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π."
        except Exception as e:
            content_text = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}"
        
        # –°–æ–∑–¥–∞–µ–º popup —Å –ª–æ–≥–æ–º
        content = BoxLayout(orientation='vertical', spacing=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = Label(
            text='üìã –ñ–£–†–ù–ê–õ –ê–ö–¢–ò–í–ù–û–°–¢–ò',
            font_size='18sp',
            size_hint_y=None,
            height='40dp',
            bold=True
        )
        content.add_widget(title_label)
        
        # –¢–µ–∫—Å—Ç –ª–æ–≥–∞ –≤ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–æ–º –≤–∏–¥–µ
        scroll = ScrollView()
        log_label = Label(
            text=content_text,
            font_size='12sp',
            text_size=(None, None),
            halign='left',
            valign='top'
        )
        scroll.add_widget(log_label)
        content.add_widget(scroll)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = Button(
            text='‚ùå –ó–ê–ö–†–´–¢–¨',
            font_size='16sp',
            size_hint_y=None,
            height='50dp'
        )
        content.add_widget(close_button)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º popup
        popup = Popup(
            title='',
            content=content,
            size_hint=(0.9, 0.8),
            auto_dismiss=False
        )
        
        close_button.bind(on_press=popup.dismiss)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥ popup
        def update_text_size(instance, value):
            log_label.text_size = (value[0] - 40, None)
        
        popup.bind(size=update_text_size)
        popup.open()
    
    def clear_log(self, instance):
        """–û—á–∏—â–∞–µ—Ç –∂—É—Ä–Ω–∞–ª —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        # –°–æ–∑–¥–∞–µ–º popup –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        content = BoxLayout(orientation='vertical', spacing=20, padding=20)
        
        message = Label(
            text='‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
            font_size='16sp',
            text_size=(None, None),
            halign='center'
        )
        content.add_widget(message)
        
        buttons = BoxLayout(orientation='horizontal', spacing=10, size_hint_y=None, height='50dp')
        
        yes_button = Button(text='‚úÖ –î–ê, –û–ß–ò–°–¢–ò–¢–¨', font_size='14sp')
        no_button = Button(text='‚ùå –û–¢–ú–ï–ù–ê', font_size='14sp')
        
        buttons.add_widget(yes_button)
        buttons.add_widget(no_button)
        content.add_widget(buttons)
        
        popup = Popup(
            title='',
            content=content,
            size_hint=(0.8, 0.4),
            auto_dismiss=False
        )
        
        def confirm_clear(instance):
            try:
                with open(self.log_file, "w", encoding="utf-8") as f:
                    f.write("=== –ñ–£–†–ù–ê–õ –ê–ö–¢–ò–í–ù–û–°–¢–ò ===\n\n")
                self.status_label.text = "üóëÔ∏è –ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω"
                self.status_label.color = [0, 0.7, 0, 1]  # –ó–µ–ª–µ–Ω—ã–π
            except Exception as e:
                self.status_label.text = f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}"
                self.status_label.color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π
            popup.dismiss()
        
        yes_button.bind(on_press=confirm_clear)
        no_button.bind(on_press=popup.dismiss)
        
        popup.open()

if __name__ == '__main__':
    TimerApp().run()
