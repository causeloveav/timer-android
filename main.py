from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.popup import Popup
from kivy.uix.scrollview import ScrollView
from kivy.uix.widget import Widget
from kivy.uix.floatlayout import FloatLayout
from kivy.clock import Clock
from kivy.core.window import Window
from kivy.animation import Animation
from kivy.graphics import Color, RoundedRectangle, Line
from kivy.metrics import dp
from datetime import datetime
import os
import random

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∑–≤—É–∫–∞
try:
    from plyer import notification
    from android.permissions import request_permissions, Permission
    from jnius import autoclass
    android_available = True
except ImportError:
    android_available = False

class Card(FloatLayout):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    def __init__(self, bg_color=(0.98, 0.98, 0.98, 1), dark_bg_color=(0.15, 0.15, 0.15, 1), 
                 elevation=2, **kwargs):
        super().__init__(**kwargs)
        self.bg_color = bg_color
        self.dark_bg_color = dark_bg_color
        self.elevation = elevation
        self.is_dark_theme = False
        
        with self.canvas.before:
            self.color = Color(*bg_color)
            self.rect = RoundedRectangle(radius=[dp(12)] * 4)
        
        self.bind(pos=self.update_graphics, size=self.update_graphics)
    
    def update_graphics(self, *args):
        self.rect.pos = (self.pos[0] + dp(2), self.pos[1] - dp(2))
        self.rect.size = self.size
    
    def set_theme(self, is_dark):
        self.is_dark_theme = is_dark
        color = self.dark_bg_color if is_dark else self.bg_color
        self.color.rgba = color

class ModernButton(Button):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    def __init__(self, button_type='primary', **kwargs):
        super().__init__(**kwargs)
        self.button_type = button_type
        self.is_dark_theme = False
        self.original_size = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø–æ —Ç–∏–ø—É –∫–Ω–æ–ø–∫–∏
        if button_type == 'primary':
            self.bg_color = (0.2, 0.6, 1, 1)  # –°–∏–Ω–∏–π
            self.text_color = (1, 1, 1, 1)
        elif button_type == 'success':
            self.bg_color = (0.2, 0.8, 0.4, 1)  # –ó–µ–ª–µ–Ω—ã–π
            self.text_color = (1, 1, 1, 1)
        elif button_type == 'danger':
            self.bg_color = (0.9, 0.3, 0.3, 1)  # –ö—Ä–∞—Å–Ω—ã–π
            self.text_color = (1, 1, 1, 1)
        else:  # secondary
            self.bg_color = (0.9, 0.9, 0.9, 1)  # –°–µ—Ä—ã–π
            self.text_color = (0.2, 0.2, 0.2, 1)
        
        self.background_color = self.bg_color
        self.color = self.text_color
        self.bind(on_press=self.on_button_press)
        self.bind(on_release=self.on_button_release)
    
    def on_button_press(self, instance):
        """–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è"""
        if not self.original_size:
            self.original_size = self.size[:]
        
        anim = Animation(size=(self.size[0] * 0.95, self.size[1] * 0.95), 
                        duration=0.1, t='out_quad')
        anim.start(self)
    
    def on_button_release(self, instance):
        """–ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è"""
        if self.original_size:
            anim = Animation(size=self.original_size, duration=0.1, t='out_quad')
            anim.start(self)

class TimerDisplay(Label):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏—Å–ø–ª–µ–π —Ç–∞–π–º–µ—Ä–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.pulse_animation = None
    
    def start_pulse(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—É–ª—å—Å–∏—Ä—É—é—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é"""
        if self.pulse_animation:
            self.pulse_animation.cancel(self)
        
        self.pulse_animation = Animation(font_size='72sp', duration=0.5) + \
                              Animation(font_size='64sp', duration=0.5)
        self.pulse_animation.repeat = True
        self.pulse_animation.start(self)
    
    def stop_pulse(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é"""
        if self.pulse_animation:
            self.pulse_animation.cancel(self)
            self.font_size = '64sp'

class TimerApp(App):
    def build(self):
        self.title = "Focus Timer 2025"
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.time_left = 0
        self.timer_running = False
        self.start_time = None
        self.log_file = "activity_log.txt"
        self.is_dark_theme = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞
        self.user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.motivational_messages = [
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü",
            "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π! üí™",
            "–ö–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —É—Å–ø–µ—Ö—É! üöÄ",
            "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç! üéØ",
            "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! ‚ö°",
            "–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏! üå±"
        ]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        if android_available:
            self.request_android_permissions()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ScrollView()
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = BoxLayout(orientation='vertical', padding=dp(20), 
                               spacing=dp(16), size_hint_y=None)
        main_layout.bind(minimum_height=main_layout.setter('height'))
        
        # –®–∞–ø–∫–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º —Ç–µ–º—ã
        header_card = Card(size_hint=(1, None), height=dp(80))
        header_layout = BoxLayout(orientation='horizontal', padding=dp(16))
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.greeting_label = Label(
            text=f"–ü—Ä–∏–≤–µ—Ç, {self.user_name}! –ì–æ—Ç–æ–≤—ã –∫ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–µ?",
            font_size='16sp',
            color=(1, 1, 1, 1) if self.is_dark_theme else (0.2, 0.2, 0.2, 1),
            text_size=(None, None),
            halign='left',
            size_hint_x=0.8
        )
        header_layout.add_widget(self.greeting_label)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        self.theme_button = ModernButton(
            text='‚òÄÔ∏è' if self.is_dark_theme else 'üåô',
            size_hint=(None, None),
            size=(dp(60), dp(48)),
            font_size='20sp'
        )
        self.theme_button.bind(on_press=self.toggle_theme)
        header_layout.add_widget(self.theme_button)
        
        header_card.add_widget(header_layout)
        main_layout.add_widget(header_card)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        timer_card = Card(size_hint=(1, None), height=dp(280))
        timer_layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(16))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–π–º–µ—Ä–∞
        timer_title = Label(
            text='–§–û–ö–£–°-–¢–ê–ô–ú–ï–†',
            font_size='20sp',
            bold=True,
            color=(1, 1, 1, 1) if self.is_dark_theme else (0.2, 0.2, 0.2, 1),
            size_hint_y=None,
            height=dp(30)
        )
        timer_layout.add_widget(timer_title)
        
        # –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Å –ª–µ–π–±–ª–æ–º
        time_input_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(50))
        time_label = Label(
            text='–ú–∏–Ω—É—Ç—ã:',
            font_size='16sp',
            size_hint_x=0.4,
            color=(1, 1, 1, 1) if self.is_dark_theme else (0.2, 0.2, 0.2, 1)
        )
        time_input_layout.add_widget(time_label)
        
        self.time_input = TextInput(
            text='25',
            multiline=False,
            font_size='18sp',
            size_hint_x=0.6,
            size_hint_y=None,
            height=dp(50),
            input_filter='int',
            background_color=(0.2, 0.2, 0.2, 1) if self.is_dark_theme else (0.95, 0.95, 0.95, 1)
        )
        time_input_layout.add_widget(self.time_input)
        timer_layout.add_widget(time_input_layout)
        
        # –î–∏—Å–ø–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏
        self.time_display = TimerDisplay(
            text='00:00',
            font_size='64sp',
            bold=True,
            color=(0.3, 0.7, 1, 1),  # –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π
            size_hint_y=None,
            height=dp(100)
        )
        timer_layout.add_widget(self.time_display)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º
        timer_buttons = GridLayout(cols=3, size_hint_y=None, height=dp(60), spacing=dp(12))
        
        self.start_button = ModernButton(
            text='–°–¢–ê–†–¢',
            font_size='16sp',
            button_type='success',
            bold=True
        )
        self.start_button.bind(on_press=self.start_timer)
        timer_buttons.add_widget(self.start_button)
        
        self.stop_button = ModernButton(
            text='–°–¢–û–ü',
            font_size='16sp',
            button_type='danger',
            disabled=True,
            bold=True
        )
        self.stop_button.bind(on_press=self.stop_timer)
        timer_buttons.add_widget(self.stop_button)
        
        reset_button = ModernButton(
            text='–°–ë–†–û–°',
            font_size='16sp',
            button_type='secondary',
            bold=True
        )
        reset_button.bind(on_press=self.reset_timer)
        timer_buttons.add_widget(reset_button)
        
        timer_layout.add_widget(timer_buttons)
        timer_card.add_widget(timer_layout)
        main_layout.add_widget(timer_card)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_card = Card(size_hint=(1, None), height=dp(200))
        activity_layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(12))
        
        activity_title = Label(
            text='–í–ê–®–ê –ê–ö–¢–ò–í–ù–û–°–¢–¨',
            font_size='16sp',
            bold=True,
            color=(1, 1, 1, 1) if self.is_dark_theme else (0.2, 0.2, 0.2, 1),
            size_hint_y=None,
            height=dp(30)
        )
        activity_layout.add_widget(activity_title)
        
        self.activity_input = TextInput(
            multiline=True,
            font_size='14sp',
            size_hint_y=None,
            height=dp(80),
            hint_text='–û–ø–∏—à–∏—Ç–µ, —á–µ–º –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –≤–æ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏...',
            background_color=(0.2, 0.2, 0.2, 1) if self.is_dark_theme else (0.95, 0.95, 0.95, 1)
        )
        self.activity_input.bind(focus=self.on_activity_focus)
        activity_layout.add_widget(self.activity_input)
        
        self.save_button = ModernButton(
            text='–°–û–•–†–ê–ù–ò–¢–¨ –ü–†–û–ì–†–ï–°–°',
            font_size='16sp',
            button_type='primary',
            size_hint_y=None,
            height=dp(50),
            disabled=True,
            bold=True
        )
        self.save_button.bind(on_press=self.save_activity)
        activity_layout.add_widget(self.save_button)
        
        activity_card.add_widget(activity_layout)
        main_layout.add_widget(activity_card)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–º
        log_card = Card(size_hint=(1, None), height=dp(120))
        log_layout = BoxLayout(orientation='vertical', padding=dp(20), spacing=dp(12))
        
        log_title = Label(
            text='–ò–°–¢–û–†–ò–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ô',
            font_size='16sp',
            bold=True,
            color=(1, 1, 1, 1) if self.is_dark_theme else (0.2, 0.2, 0.2, 1),
            size_hint_y=None,
            height=dp(30)
        )
        log_layout.add_widget(log_title)
        
        log_buttons = GridLayout(cols=2, size_hint_y=None, height=dp(50), spacing=dp(12))
        
        view_log_button = ModernButton(
            text='–ü–û–°–ú–û–¢–†–ï–¢–¨',
            font_size='14sp',
            button_type='primary'
        )
        view_log_button.bind(on_press=self.view_log)
        log_buttons.add_widget(view_log_button)
        
        clear_log_button = ModernButton(
            text='–û–ß–ò–°–¢–ò–¢–¨',
            font_size='14sp',
            button_type='secondary'
        )
        clear_log_button.bind(on_press=self.clear_log)
        log_buttons.add_widget(clear_log_button)
        
        log_layout.add_widget(log_buttons)
        log_card.add_widget(log_layout)
        main_layout.add_widget(log_card)
        
        # –°—Ç–∞—Ç—É—Å —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        self.status_label = Label(
            text='‚ú® –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é?',
            font_size='14sp',
            color=(0.3, 0.7, 1, 1),
            size_hint_y=None,
            height=dp(40),
            text_size=(None, None),
            halign='center'
        )
        main_layout.add_widget(self.status_label)
        
        # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        spacer = Widget(size_hint_y=None, height=dp(100))
        main_layout.add_widget(spacer)
        
        main_container.add_widget(main_layout)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
        self.apply_theme()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
        self.cards = [header_card, timer_card, activity_card, log_card]
        
        return main_container
    
    def toggle_theme(self, instance):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        self.is_dark_theme = not self.is_dark_theme
        self.theme_button.text = '‚òÄÔ∏è' if self.is_dark_theme else 'üåô'
        self.apply_theme()
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
        for card in self.cards:
            card.set_theme(self.is_dark_theme)
    
    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É"""
        if self.is_dark_theme:
            Window.clearcolor = (0.1, 0.1, 0.1, 1)  # –¢—ë–º–Ω—ã–π —Ñ–æ–Ω
            text_color = (1, 1, 1, 1)
        else:
            Window.clearcolor = (0.95, 0.95, 0.95, 1)  # –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
            text_color = (0.2, 0.2, 0.2, 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
        if hasattr(self, 'greeting_label'):
            self.greeting_label.color = text_color
    
    def on_activity_focus(self, instance, value):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if value:
            Clock.schedule_once(lambda dt: self.scroll_to_input(), 0.3)
    
    def scroll_to_input(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞"""
        try:
            main_scroll = self.root
            main_scroll.scroll_y = 0
        except:
            pass
    
    def request_android_permissions(self):
        """–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Android"""
        if android_available:
            request_permissions([
                Permission.WRITE_EXTERNAL_STORAGE,
                Permission.READ_EXTERNAL_STORAGE,
                Permission.VIBRATE,
                Permission.WAKE_LOCK,
                Permission.FOREGROUND_SERVICE
            ])
    
    def on_pause(self):
        """–†–∞–±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ"""
        if self.timer_running:
            self.show_notification(
                "üî• –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞",
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é! –û—Å—Ç–∞–ª–æ—Å—å: {self.time_left // 60:02d}:{self.time_left % 60:02d}"
            )
        return True
    
    def start_timer(self, instance):
        try:
            minutes = int(self.time_input.text)
            if minutes <= 0:
                self.show_status_message("‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º", error=True)
                return
                
            self.time_left = minutes * 60
            self.timer_running = True
            self.start_time = datetime.now()
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
            self.time_display.start_pulse()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.start_button.disabled = True
            self.stop_button.disabled = False
            self.time_input.readonly = True
            
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.show_status_message("üöÄ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å! –í—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.show_notification(
                "üéØ –§–æ–∫—É—Å-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                f"–°–µ—Å—Å–∏—è –Ω–∞ {minutes} –º–∏–Ω—É—Ç –Ω–∞—á–∞–ª–∞—Å—å. –£–¥–∞—á–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏!"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            Clock.schedule_interval(self.update_timer, 1)
            
        except ValueError:
            self.show_status_message("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", error=True)
    
    def update_timer(self, dt):
        if self.timer_running and self.time_left > 0:
            self.time_left -= 1
            minutes = self.time_left // 60
            seconds = self.time_left % 60
            self.time_display.text = f"{minutes:02d}:{seconds:02d}"
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if self.time_left <= 60:
                self.time_display.color = (1, 0.3, 0.3, 1)  # –ö—Ä–∞—Å–Ω—ã–π
            elif self.time_left <= 300:
                self.time_display.color = (1, 0.6, 0.2, 1)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            else:
                self.time_display.color = (0.3, 0.7, 1, 1)  # –°–∏–Ω–∏–π
            
            if self.time_left <= 0:
                self.timer_finished()
                
        return self.timer_running
    
    def timer_finished(self):
        self.timer_running = False
        self.time_display.text = "00:00"
        self.time_display.color = (0.2, 0.8, 0.4, 1)  # –ó–µ–ª–µ–Ω—ã–π - —É—Å–ø–µ—Ö
        self.time_display.stop_pulse()
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.show_status_message("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π
        motivational_msg = random.choice(self.motivational_messages)
        self.show_notification(
            "‚úÖ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            motivational_msg,
            urgent=True
        )
        
        # –ó–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—è
        self.play_notification_sound()
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.save_button.disabled = False
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.time_input.readonly = False
        self.activity_input.focus = True
        
        Clock.unschedule(self.update_timer)
    
    def show_status_message(self, message, error=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        if error:
            self.status_label.color = (1, 0.3, 0.3, 1)
        else:
            self.status_label.color = (0.3, 0.7, 1, 1)
        
        self.status_label.text = message
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        anim = Animation(opacity=0, duration=0.1) + Animation(opacity=1, duration=0.3)
        anim.start(self.status_label)
    
    def show_notification(self, title, message, urgent=False):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Android"""
        if android_available:
            try:
                notification.notify(
                    title=title,
                    message=message,
                    app_name="Focus Timer",
                    timeout=10 if not urgent else 0,
                    toast=urgent
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def play_notification_sound(self):
        """–ó–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—è"""
        if android_available:
            try:
                PythonActivity = autoclass('org.kivy.android.PythonActivity')
                context = PythonActivity.mActivity
                
                RingtoneManager = autoclass('android.media.RingtoneManager')
                notification_uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)
                ringtone = RingtoneManager.getRingtone(context, notification_uri)
                
                if ringtone:
                    ringtone.play()
                
                # –í–∏–±—Ä–∞—Ü–∏—è
                vibrator = context.getSystemService(context.VIBRATOR_SERVICE)
                if vibrator and vibrator.hasVibrator():
                    vibrator.vibrate(1000)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–≤—É–∫–∞: {e}")
    
    def stop_timer(self, instance):
        self.timer_running = False
        self.time_display.stop_pulse()
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.time_input.readonly = False
        self.show_status_message("‚è∏Ô∏è –°–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
        Clock.unschedule(self.update_timer)
    
    def reset_timer(self, instance):
        self.timer_running = False
        self.time_left = 0
        self.time_display.text = "00:00"
        self.time_display.color = (0.3, 0.7, 1, 1)
        self.time_display.stop_pulse()
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.time_input.readonly = False
        self.save_button.disabled = True
        self.activity_input.text = ""
        self.show_status_message("üîÑ –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏?")
        Clock.unschedule(self.update_timer)
    
    def save_activity(self, instance):
        activity = self.activity_input.text.strip()
        if not activity:
            self.show_status_message("üí≠ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏!", error=True)
            return
        
        try:
            duration_minutes = int(self.time_input.text)
            end_time = datetime.now()
            
            if not os.path.exists(self.log_file):
                with open(self.log_file, "w", encoding="utf-8") as f:
                    f.write("üèÜ –ñ–£–†–ù–ê–õ –î–û–°–¢–ò–ñ–ï–ù–ò–ô –ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò üèÜ\n\n")
            
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(
                    f"üìÖ {self.start_time:%Y-%m-%d %H:%M:%S} ‚Üí "
                    f"{end_time:%Y-%m-%d %H:%M:%S}\n"
                    f"‚è±Ô∏è –§–æ–∫—É—Å-–≤—Ä–µ–º—è: {duration_minutes} –º–∏–Ω—É—Ç\n"
                    f"üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {activity}\n"
                    f"{'=' * 50}\n\n"
                )
            
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            success_msg = random.choice(self.motivational_messages)
            self.show_status_message(f"üíæ {success_msg}")
            
            self.save_button.disabled = True
            self.activity_input.text = ""
            
            # –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
            anim = Animation(size=(self.save_button.size[0] * 1.1, self.save_button.size[1] * 1.1), 
                           duration=0.2) + \
                   Animation(size=self.save_button.size, duration=0.2)
            anim.start(self.save_button)
            
            self.show_notification(
                "üéâ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
                f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–ø–∏—Å–∞–Ω–æ: {activity}"
            )
            
        except Exception as e:
            self.show_status_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", error=True)
    
    def view_log(self, instance):
        """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞"""
        try:
            if not os.path.exists(self.log_file):
                content_text = "üìù –í–∞—à –∂—É—Ä–Ω–∞–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç.\n\nüöÄ –ù–∞—á–Ω–∏—Ç–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö!"
            else:
                with open(self.log_file, "r", encoding="utf-8") as f:
                    content_text = f.read()
                    if not content_text.strip():
                        content_text = "üìù –í–∞—à –∂—É—Ä–Ω–∞–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç.\n\nüöÄ –ù–∞—á–Ω–∏—Ç–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö!"
        except Exception as e:
            content_text = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞: {e}"
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π popup
        content = BoxLayout(orientation='vertical', spacing=dp(16), padding=dp(20))
        
        title_label = Label(
            text='üèÜ –ñ–£–†–ù–ê–õ –î–û–°–¢–ò–ñ–ï–ù–ò–ô',
            font_size='20sp',
            bold=True,
            size_hint_y=None,
            height=dp(50),
            color=(0.3, 0.7, 1, 1)
        )
        content.add_widget(title_label)
        
        scroll = ScrollView()
        log_label = Label(
            text=content_text,
            font_size='14sp',
            text_size=(None, None),
            halign='left',
            valign='top',
            color=(1, 1, 1, 1) if self.is_dark_theme else (0.2, 0.2, 0.2, 1)
        )
        scroll.add_widget(log_label)
        content.add_widget(scroll)
        
        close_button = ModernButton(
            text='–ó–ê–ö–†–´–¢–¨',
            font_size='16sp',
            button_type='primary',
            size_hint_y=None,
            height=dp(50)
        )
        content.add_widget(close_button)
        
        popup = Popup(
            title='',
            content=content,
            size_hint=(0.9, 0.8),
            auto_dismiss=False,
            background_color=(0.15, 0.15, 0.15, 0.9) if self.is_dark_theme else (0.95, 0.95, 0.95, 0.9)
        )
        
        close_button.bind(on_press=popup.dismiss)
        
        def update_text_size(instance, value):
            log_label.text_size = (value[0] - dp(40), None)
        
        popup.bind(size=update_text_size)
        popup.open()
    
    def clear_log(self, instance):
        """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏"""
        content = BoxLayout(orientation='vertical', spacing=dp(20), padding=dp(20))
        
        message = Label(
            text='üóëÔ∏è –û–ß–ò–°–¢–ö–ê –ñ–£–†–ù–ê–õ–ê\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π?\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
            font_size='16sp',
            text_size=(None, None),
            halign='center',
            color=(1, 1, 1, 1) if self.is_dark_theme else (0.2, 0.2, 0.2, 1)
        )
        content.add_widget(message)
        
        buttons = BoxLayout(orientation='horizontal', spacing=dp(12), size_hint_y=None, height=dp(50))
        
        yes_button = ModernButton(text='–£–î–ê–õ–ò–¢–¨', font_size='14sp', button_type='danger')
        no_button = ModernButton(text='–û–¢–ú–ï–ù–ê', font_size='14sp', button_type='secondary')
        
        buttons.add_widget(yes_button)
        buttons.add_widget(no_button)
        content.add_widget(buttons)
        
        popup = Popup(
            title='',
            content=content,
            size_hint=(0.8, 0.5),
            auto_dismiss=False,
            background_color=(0.15, 0.15, 0.15, 0.9) if self.is_dark_theme else (0.95, 0.95, 0.95, 0.9)
        )
        
        def confirm_clear(instance):
            try:
                with open(self.log_file, "w", encoding="utf-8") as f:
                    f.write("üèÜ –ñ–£–†–ù–ê–õ –î–û–°–¢–ò–ñ–ï–ù–ò–ô –ò –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò üèÜ\n\n")
                self.show_status_message("üóëÔ∏è –ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω. –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º!")
            except Exception as e:
                self.show_status_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}", error=True)
            popup.dismiss()
        
        yes_button.bind(on_press=confirm_clear)
        no_button.bind(on_press=popup.dismiss)
        
        popup.open()

if __name__ == '__main__':
    TimerApp().run()
